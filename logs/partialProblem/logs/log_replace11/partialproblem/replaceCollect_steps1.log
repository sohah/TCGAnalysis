symbolic.min_int=-2147483648
symbolic.min_long=-9223372036854775808
symbolic.min_short=-32768
symbolic.min_byte=-128
symbolic.min_char=0
symbolic.max_int=2147483647
symbolic.max_long=9223372036854775807
symbolic.max_short=32767
symbolic.max_byte=127
symbolic.max_char=65535
symbolic.min_double=4.9E-324
symbolic.max_double=1.7976931348623157E308
* Warning: either invalid or no veritestingMode specified.
* Warning: set veritestingMode to 1 to use vanilla SPF with VeritestingListener
* Warning: set veritestingMode to 2 to use veritesting
* Warning: set veritestingMode to 3 to use veritesting with higher order regions
* Warning: set veritestingMode to 4 to use veritesting with higher order regions and SPFCases
* Warning: resetting veritestingMode to 0 (aka use vanilla SPF)
JavaPathfinder core system v8.0 (rev e734381a6e606354034111dc855be9a8e454ce71) - (C) 2005-2014 United States Government. All rights reserved.


====================================================== system under test
tcgbenchmarks.replace.replace11.main()

====================================================== search started: 5/13/21 6:20 PM
---- CoverageMode = SPF, solver = z3bitvectorinc, benchmark= replace11, STEPS 1
|-|-|-|-|-|-|-|-|-|-|-|-finished obligation collection|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-
caa2caa2aChallege: illegal pattern!
c2a&acaa2c2a&acaa2a&accaa2caa22caa2aa&ac2a&acaa2caa2caa2caa2caa2Challege: illegal pattern!
Challege: illegal pattern!
Challege: illegal pattern!
Challege: illegal pattern!
c2a&acaa22a&aChallege: illegal pattern!
c2a&aChallege: illegal pattern!
c2a&acaa22a&ac2a&ac2a&acaa2c2a&ac2a&aChallege: illegal pattern!
c2a&acaa2ccaa22caa2acaa2&caa2ac2a&ac2a&ac2a&ac2a&ac2a&ac2a&aChallege: illegal pattern!
c2a&acaa2ccaa22caa2acaa2&caa2ac2a&ac2a&ac2a&acaa2a&accaa2&a2caa2aacaa2&aChallege: illegal pattern!
c2a&ac2a&a2a&aa&a&acaa22caa2acaa2&caa2acaa2ccaa2acaa2&caa2acaa22caa2&caa2caa2acaa2acaa2&caa2ac2a&ac2a&a2a&aa&a&acaa2a&ac2a&accaa2&a2a&a2caa2aa&aacaa2&a&ac2a&ac2a&a2a&aa&a&acaa22a&accaa2a&a2caa2&caa2acaa2a&ac2a&ac2a&ac2a&acaa22a&accaa2a&a2caa2&caa2acaa2a&acaa2ccaa22caa2acaa2&caa2a
====================================================== VeritestingListener report:
Encountered Veritesting Regions in veriRegions (i.e., VeriTestingMain.veriRegions size) = 0

/************************ Printing Exception Statistics *****************
Static Analysis exceptions count = 0
Instantiation Time exceptions count = 0
Unknown phases exception count = 0


/************************ Printing Time Decomposition Statistics *****************
static analysis time = 0 msec
Veritesting Dyn Time = 5006 msec
Veritesting fix-point Time = 0 msec
GoTo rewrite instances = 0

/************************ Printing Solver Statistics *****************
Total Solver Queries Count = 650
Total Solver Time = 202 msec
Total Solver Parse Time = 116 msec
Region Summary Parse Time = 0 msec
Total Solver Clean up Time = 0 msec
PCSatSolverCount = 0
PCSatSolverTime = 0 msec
Constant Propagation Time for PC sat. checks = 0
Array SPF Case count = 0
If-removed count = 0

/************************ Printing Region Statistics *****************
Number of Distinct Veritested Regions = 0
Number of Distinct Un-Veritested Symbolic Regions = 0
Number of Distinct Failed Regions for Field Reference = 0
Number of Distinct Failed Regions for SPFCases = 0
Number of Distinct Failed Regions for missing method summaries = 0
Number of Distinct Failed Regions for Other Reasons = 0
Number of High Order Regions Used = 0

/************************ Printing Instantiation Statistics *****************
Number of successful instantiations = 0
Total Number of unsuccessful instantiations = 0
Number of failed instantiations due to Field Reference = 0
Number of failed instantiations due to SPFCases = 0
Number of failed instantiations due to missing method summaries = 0
Number of failed instantiations due to Other Reasons = 0


Number of Veritested Regions Instances = 0
Printing keys of regions that were instantiated at least once
Finished printing keys of regions that were instantiated at least once

Metrics Vector:
5006,0,5006,90,650,202,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0.0,0,0,0

====================================================== Branch Coverage report:
Obligation -----> Coverage:
tcgbenchmarks.replace.replace11.putsub([CII[C)V.20.TAKEN -----> true 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.51.TAKEN -----> true 
tcgbenchmarks.replace.replace11.isalnum(C)Z.37.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.escSub([C)C.66.TAKEN -----> false 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.32.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.362.TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.227.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.315.TAKEN -----> true 
tcgbenchmarks.replace.replace11.locate(C[CI)Z.12.TAKEN -----> true 
tcgbenchmarks.replace.replace11.esc([C)C.50.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.esc([C)C.26.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.143.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.433.TAKEN -----> false 
tcgbenchmarks.replace.replace11.makesub([C[C)I.64.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.mainProcess(CCCCCCCCCCC)V.37.TAKEN -----> true 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.84.TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.16.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.64.TAKEN -----> true 
tcgbenchmarks.replace.replace11.stclose([CI)V.18.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.mainProcess(CCCCCCCCCCC)V.37.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.76.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.in_pat_set(C)Z.51.TAKEN -----> false 
tcgbenchmarks.replace.replace11.makesub([C[C)I.13.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.isalnum(C)Z.3.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.makepat([C[C)I.35.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.212.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.40.TAKEN -----> false 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.40.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.19.TAKEN -----> true 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.135.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.in_pat_set(C)Z.11.TAKEN -----> true 
tcgbenchmarks.replace.replace11.escSub([C)C.26.TAKEN -----> false 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.160.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.112.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.277.TAKEN -----> false 
tcgbenchmarks.replace.replace11.getccl([C[C)Z.15.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.patsize([CI)I.74.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.172.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.makepat([C[C)I.433.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.160.TAKEN -----> false 
tcgbenchmarks.replace.replace11.mainProcess(CCCCCCCCCCC)V.98.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.locate(C[CI)Z.20.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.224.TAKEN -----> false 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.261.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.locate(C[CI)Z.12.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.makepat([C[C)I.323.TAKEN -----> false 
tcgbenchmarks.replace.replace11.esc([C)C.26.TAKEN -----> true 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.84.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.getccl([C[C)Z.84.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.patsize([CI)I.13.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.makepat([C[C)I.43.TAKEN -----> false 
tcgbenchmarks.replace.replace11.makepat([C[C)I.83.TAKEN -----> true 
tcgbenchmarks.replace.replace11.in_set_2(C)Z.11.TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.43.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.makesub([C[C)I.7.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.104.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.getccl([C[C)Z.23.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.268.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.patsize([CI)I.32.TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.225.TAKEN -----> false 
tcgbenchmarks.replace.replace11.in_set_2(C)Z.3.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.10.TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.172.TAKEN -----> false 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.64.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.change([C[C[C)V.77.TAKEN -----> true 
tcgbenchmarks.replace.replace11.in_pat_set(C)Z.11.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.197.TAKEN -----> false 
tcgbenchmarks.replace.replace11.patsize([CI)I.88.TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.71.TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.277.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.354.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.stclose([CI)V.8.TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.362.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.makepat([C[C)I.200.TAKEN -----> true 
tcgbenchmarks.replace.replace11.getccl([C[C)Z.15.TAKEN -----> true 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.261.TAKEN -----> true 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.231.TAKEN -----> true 
tcgbenchmarks.replace.replace11.patsize([CI)I.88.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.escSub([C)C.7.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.56.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.in_pat_set(C)Z.43.TAKEN -----> true 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.11.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.locate(C[CI)Z.20.TAKEN -----> false 
tcgbenchmarks.replace.replace11.getccl([C[C)Z.57.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.88.TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.212.TAKEN -----> false 
tcgbenchmarks.replace.replace11.makepat([C[C)I.507.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.makesub([C[C)I.13.TAKEN -----> true 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.173.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.in_pat_set(C)Z.3.TAKEN -----> true 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.146.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.32.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.96.TAKEN -----> true 
tcgbenchmarks.replace.replace11.escSub([C)C.66.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.makepat([C[C)I.491.TAKEN -----> false 
tcgbenchmarks.replace.replace11.stclose([CI)V.18.TAKEN -----> false 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.122.TAKEN -----> true 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.187.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.makesub([C[C)I.34.TAKEN -----> false 
tcgbenchmarks.replace.replace11.makepat([C[C)I.458.TAKEN -----> true 
tcgbenchmarks.replace.replace11.makesub([C[C)I.64.TAKEN -----> false 
tcgbenchmarks.replace.replace11.in_pat_set(C)Z.35.TAKEN -----> true 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.146.TAKEN -----> false 
tcgbenchmarks.replace.replace11.putsub([CII[C)V.20.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.151.TAKEN -----> false 
tcgbenchmarks.replace.replace11.escSub([C)C.7.TAKEN -----> false 
tcgbenchmarks.replace.replace11.change([C[C[C)V.33.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.escSub([C)C.50.TAKEN -----> false 
tcgbenchmarks.replace.replace11.getccl([C[C)Z.128.TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.320.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.change([C[C[C)V.33.TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.12.TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.349.TAKEN -----> false 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.173.TAKEN -----> true 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.77.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.in_pat_set(C)Z.3.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.64.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.change([C[C[C)V.27.TAKEN -----> true 
tcgbenchmarks.replace.replace11.mainProcess(CCCCCCCCCCC)V.98.TAKEN -----> true 
tcgbenchmarks.replace.replace11.makesub([C[C)I.109.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.makepat([C[C)I.521.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.320.TAKEN -----> false 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.78.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.35.TAKEN -----> true 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.182.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.76.TAKEN -----> false 
tcgbenchmarks.replace.replace11.change([C[C[C)V.9.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.227.TAKEN -----> true 
tcgbenchmarks.replace.replace11.escSub([C)C.26.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.makepat([C[C)I.305.TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.189.TAKEN -----> false 
tcgbenchmarks.replace.replace11.makesub([C[C)I.109.TAKEN -----> true 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.11.TAKEN -----> true 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.190.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.putsub([CII[C)V.7.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.esc([C)C.7.TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.521.TAKEN -----> true 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.64.TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.294.TAKEN -----> false 
tcgbenchmarks.replace.replace11.makepat([C[C)I.305.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.change([C[C[C)V.27.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.151.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.makepat([C[C)I.378.TAKEN -----> false 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.77.TAKEN -----> true 
tcgbenchmarks.replace.replace11.patsize([CI)I.46.TAKEN -----> true 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.98.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.isalnum(C)Z.3.TAKEN -----> false 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.132.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.241.TAKEN -----> true 
tcgbenchmarks.replace.replace11.change([C[C[C)V.51.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.isalnum(C)Z.37.TAKEN -----> false 
tcgbenchmarks.replace.replace11.patsize([CI)I.13.TAKEN -----> true 
tcgbenchmarks.replace.replace11.getccl([C[C)Z.57.TAKEN -----> false 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.8.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.isalnum(C)Z.17.TAKEN -----> false 
tcgbenchmarks.replace.replace11.makepat([C[C)I.458.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.patsize([CI)I.74.TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.189.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.241.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.267.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.isalnum(C)Z.9.TAKEN -----> false 
tcgbenchmarks.replace.replace11.makepat([C[C)I.474.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.in_set_2(C)Z.3.TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.404.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.507.TAKEN -----> true 
tcgbenchmarks.replace.replace11.patsize([CI)I.46.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.isalnum(C)Z.9.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.in_set_2(C)Z.19.TAKEN -----> true 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.182.TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.349.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.isalnum(C)Z.23.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.makepat([C[C)I.248.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.in_pat_set(C)Z.51.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.51.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.83.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.patsize([CI)I.60.TAKEN -----> true 
tcgbenchmarks.replace.replace11.makesub([C[C)I.7.TAKEN -----> false 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.190.TAKEN -----> false 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.68.TAKEN -----> true 
tcgbenchmarks.replace.replace11.in_pat_set(C)Z.43.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.esc([C)C.7.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.makesub([C[C)I.122.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.patsize([CI)I.108.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.8.TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.104.TAKEN -----> false 
tcgbenchmarks.replace.replace11.makepat([C[C)I.143.TAKEN -----> false 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.10.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.esc([C)C.66.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.getccl([C[C)Z.128.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.12.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.248.TAKEN -----> false 
tcgbenchmarks.replace.replace11.makepat([C[C)I.71.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.in_set_2(C)Z.19.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.makepat([C[C)I.315.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.20.TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.20.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.putsub([CII[C)V.7.TAKEN -----> true 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.224.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.makepat([C[C)I.103.TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.404.TAKEN -----> false 
tcgbenchmarks.replace.replace11.makepat([C[C)I.491.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.makesub([C[C)I.34.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.getccl([C[C)Z.84.TAKEN -----> false 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.96.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.127.TAKEN -----> false 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.108.TAKEN -----> false 
tcgbenchmarks.replace.replace11.in_pat_set(C)Z.27.TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.16.TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.109.TAKEN -----> true 
tcgbenchmarks.replace.replace11.esc([C)C.50.TAKEN -----> true 
tcgbenchmarks.replace.replace11.in_set_2(C)Z.11.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.267.TAKEN -----> true 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.19.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.stclose([CI)V.8.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.197.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.patsize([CI)I.128.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.187.TAKEN -----> false 
tcgbenchmarks.replace.replace11.makepat([C[C)I.172.TAKEN -----> false 
tcgbenchmarks.replace.replace11.patsize([CI)I.128.TAKEN -----> false 
tcgbenchmarks.replace.replace11.makesub([C[C)I.122.TAKEN -----> false 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.32.TAKEN -----> true 
tcgbenchmarks.replace.replace11.patsize([CI)I.108.TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.22.TAKEN -----> true 
tcgbenchmarks.replace.replace11.esc([C)C.66.TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.117.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.makesub([C[C)I.96.TAKEN -----> true 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.88.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.in_pat_set(C)Z.35.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.474.TAKEN -----> true 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.32.TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.225.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.makepat([C[C)I.206.TAKEN -----> true 
tcgbenchmarks.replace.replace11.isalnum(C)Z.23.TAKEN -----> false 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.27.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.change([C[C[C)V.51.TAKEN -----> true 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.122.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.isalnum(C)Z.17.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.isalnum(C)Z.31.TAKEN -----> false 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.98.TAKEN -----> true 
tcgbenchmarks.replace.replace11.makesub([C[C)I.23.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.change([C[C[C)V.77.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.78.TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.323.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.in_pat_set(C)Z.19.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.103.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.231.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.in_pat_set(C)Z.19.TAKEN -----> true 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.56.TAKEN -----> false 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.132.TAKEN -----> true 
tcgbenchmarks.replace.replace11.omatch([C[CI)Z.108.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.getccl([C[C)Z.23.TAKEN -----> false 
tcgbenchmarks.replace.replace11.makepat([C[C)I.117.TAKEN -----> false 
tcgbenchmarks.replace.replace11.makepat([C[C)I.378.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.294.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.354.TAKEN -----> false 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.22.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.200.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.makesub([C[C)I.96.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.27.TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.268.TAKEN -----> false 
tcgbenchmarks.replace.replace11.makepat([C[C)I.172.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.escSub([C)C.50.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.isalnum(C)Z.31.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.in_pat_set(C)Z.27.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.patsize([CI)I.60.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.patsize([CI)I.32.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.206.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.makepat([C[C)I.109.NOT_TAKEN -----> true 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.135.TAKEN -----> true 
tcgbenchmarks.replace.replace11.makesub([C[C)I.23.TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.112.TAKEN -----> false 
tcgbenchmarks.replace.replace11.change([C[C[C)V.9.TAKEN -----> true 
tcgbenchmarks.replace.replace11.dodash(C[C[C)V.68.NOT_TAKEN -----> false 
tcgbenchmarks.replace.replace11.amatch([C[CI)I.127.NOT_TAKEN -----> true 


====================================================== Method Sequences
[mainProcess('?','?','&','a','a','2','c','2','a','&','a')]
[mainProcess('?','[','&','a','a','2','c','2','a','&','a')]
[mainProcess('?','%','&','a','a','2','c','2','a','&','a')]
[mainProcess('?','*','&','a','a','2','c','2','a','&','a')]
[mainProcess('?','$','&','a','a','2','c','2','a','&','a')]
[mainProcess('?','2','&','a','a','2','c','2','a','&','a')]
[mainProcess('?','a','&','a','a','2','c','2','a','&','a')]
[mainProcess('?','&','&','a','a','2','c','2','a','&','a')]
[mainProcess('?','䀦','&','a','a','2','c','2','a','&','a')]
[mainProcess('?','@','&','a','a','2','c','2','a','&','a')]
[mainProcess('?','\n','&','a','a','2','c','2','a','&','a')]
[mainProcess('[','^','&','a','a','2','c','2','a','&','a')]
[mainProcess('[',' ','&','a','a','2','c','2','a','&','a')]
[mainProcess('[','-','&','a','a','2','c','2','a','&','a')]
[mainProcess('[','\n','&','a','a','2','c','2','a','&','a')]
[mainProcess('[',']','&','a','a','2','c','2','a','&','a')]
[mainProcess('%','?','&','a','a','2','c','2','a','&','a')]
[mainProcess('%','[','&','a','a','2','c','2','a','&','a')]
[mainProcess('%','%','&','a','a','2','c','2','a','&','a')]
[mainProcess('%','*','&','a','a','2','c','2','a','&','a')]
[mainProcess('%','$','&','a','a','2','c','2','a','&','a')]
[mainProcess('%','c','&','a','a','2','c','2','a','&','a')]
[mainProcess('%','䁣','&','a','a','2','c','2','a','&','a')]
[mainProcess('%','@','&','a','a','2','c','2','a','&','a')]
[mainProcess('%','\n','&','a','a','2','c','2','a','&','a')]
[mainProcess('*','?','&','a','a','2','c','2','a','&','a')]
[mainProcess('*','[','&','a','a','2','c','2','a','&','a')]
[mainProcess('*','%','&','a','a','2','c','2','a','&','a')]
[mainProcess('*','*','&','a','a','2','c','2','a','&','a')]
[mainProcess('*','$','&','a','a','2','c','2','a','&','a')]
[mainProcess('*','䀤','&','a','a','2','c','2','a','&','a')]
[mainProcess('*','@','&','a','a','2','c','2','a','&','a')]
[mainProcess('*','\n','&','a','a','2','c','2','a','&','a')]
[mainProcess('$','\n','&','a','a','2','c','2','a','&','a')]
[mainProcess('$','?','&','a','a','2','c','2','a','&','a')]
[mainProcess('$','[','&','a','a','2','c','2','a','&','a')]
[mainProcess('$','%','&','a','a','2','c','2','a','&','a')]
[mainProcess('$','*','&','a','a','2','c','2','a','&','a')]
[mainProcess('$','$','&','a','a','2','c','2','a','&','a')]
[mainProcess('$','䀤','&','a','a','2','c','2','a','&','a')]
[mainProcess('$','@','&','a','a','2','c','2','a','&','a')]
[mainProcess('c','?','&','a','a','2','c','2','a','&','a')]
[mainProcess('2','?','&','a','a','2','c','2','a','&','a')]
[mainProcess('a','?','&','a','a','2','c','2','a','&','a')]
[mainProcess('&','?','&','a','a','2','c','2','a','&','a')]
[mainProcess('䀦','?','&','a','a','2','c','2','a','&','a')]
[mainProcess('䀦','[','&','a','a','2','c','2','a','&','a')]
[mainProcess('c','%','&','a','a','2','c','2','a','&','a')]
[mainProcess('2','%','&','a','a','2','c','2','a','&','a')]
[mainProcess('a','%','&','a','a','2','c','2','a','&','a')]
[mainProcess('&','%','&','a','a','2','c','2','a','&','a')]
[mainProcess('䀦','%','&','a','a','2','c','2','a','&','a')]
[mainProcess('c','*','&','a','a','2','c','2','a','&','a')]
[mainProcess('2','*','&','a','a','2','c','2','a','&','a')]
[mainProcess('a','*','&','a','a','2','c','2','a','&','a')]
[mainProcess('&','*','&','a','a','2','c','2','a','&','a')]
[mainProcess('䀦','*','&','a','a','2','c','2','a','&','a')]
[mainProcess('c','$','&','a','a','2','c','2','a','&','a')]
[mainProcess('2','$','&','a','a','2','c','2','a','&','a')]
[mainProcess('a','$','&','a','a','2','c','2','a','&','a')]
[mainProcess('&','$','&','a','a','2','c','2','a','&','a')]
[mainProcess('䀦','$','&','a','a','2','c','2','a','&','a')]
[mainProcess('c','2','&','a','a','2','c','2','a','&','a')]
[mainProcess('c','䀲','&','a','a','2','c','2','a','&','a')]
[mainProcess('2','a','&','a','a','2','c','2','a','&','a')]
[mainProcess('2','䁡','&','a','a','2','c','2','a','&','a')]
[mainProcess('a','&','&','a','a','2','c','2','a','&','a')]
[mainProcess('a','䀦','&','a','a','2','c','2','a','&','a')]
[mainProcess('&','a','&','a','a','2','c','2','a','&','a')]
[mainProcess('&','䁡','&','a','a','2','c','2','a','&','a')]
[mainProcess('耦','䁡','&','a','a','2','c','2','a','&','a')]
[mainProcess('c','@','&','a','a','2','c','2','a','&','a')]
[mainProcess('2','@','&','a','a','2','c','2','a','&','a')]
[mainProcess('a','@','&','a','a','2','c','2','a','&','a')]
[mainProcess('&','@','&','a','a','2','c','2','a','&','a')]
[mainProcess('䀦','@','&','a','a','2','c','2','a','&','a')]
[mainProcess('c','\n','&','a','a','2','c','2','a','&','a')]
[mainProcess('2','\n','&','a','a','2','c','2','a','&','a')]
[mainProcess('a','\n','&','a','a','2','c','2','a','&','a')]
[mainProcess('&','\n','&','a','a','2','c','2','a','&','a')]
[mainProcess('䀦','\n','&','a','a','2','c','2','a','&','a')]
[mainProcess('@','\n','&','a','a','2','c','2','a','&','a')]
[mainProcess('@','n','&','a','a','2','c','2','a','&','a')]
[mainProcess('@','t','&','a','a','2','c','2','a','&','a')]
[mainProcess('@','c','&','a','a','2','c','2','a','&','a')]
[mainProcess('@','2','&','a','a','2','c','2','a','&','a')]
[mainProcess('@','a','&','a','a','2','c','2','a','&','a')]
[mainProcess('@','&','&','a','a','2','c','2','a','&','a')]
[mainProcess('@','䀦','&','a','a','2','c','2','a','&','a')]
[mainProcess('\n','\n','&','a','a','2','c','2','a','&','a')]

====================================================== JUnit 4.0 test class
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;

public class tcgbenchmarks_replace_replace11Test {

	private tcgbenchmarks.replace.replace11 tcgbenchmarks_replace_replace11;

	@Before
	public void setUp() throws Exception {
		tcgbenchmarks_replace_replace11 = new tcgbenchmarks.replace.replace11();
	}

	@Test
	public void test0() {
		tcgbenchmarks_replace_replace11.mainProcess('?','?','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test1() {
		tcgbenchmarks_replace_replace11.mainProcess('?','[','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test2() {
		tcgbenchmarks_replace_replace11.mainProcess('?','%','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test3() {
		tcgbenchmarks_replace_replace11.mainProcess('?','*','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test4() {
		tcgbenchmarks_replace_replace11.mainProcess('?','$','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test5() {
		tcgbenchmarks_replace_replace11.mainProcess('?','2','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test6() {
		tcgbenchmarks_replace_replace11.mainProcess('?','a','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test7() {
		tcgbenchmarks_replace_replace11.mainProcess('?','&','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test8() {
		tcgbenchmarks_replace_replace11.mainProcess('?','䀦','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test9() {
		tcgbenchmarks_replace_replace11.mainProcess('?','@','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test10() {
		tcgbenchmarks_replace_replace11.mainProcess('?','\n','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test11() {
		tcgbenchmarks_replace_replace11.mainProcess('[','^','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test12() {
		tcgbenchmarks_replace_replace11.mainProcess('[',' ','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test13() {
		tcgbenchmarks_replace_replace11.mainProcess('[','-','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test14() {
		tcgbenchmarks_replace_replace11.mainProcess('[','\n','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test15() {
		tcgbenchmarks_replace_replace11.mainProcess('[',']','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test16() {
		tcgbenchmarks_replace_replace11.mainProcess('%','?','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test17() {
		tcgbenchmarks_replace_replace11.mainProcess('%','[','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test18() {
		tcgbenchmarks_replace_replace11.mainProcess('%','%','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test19() {
		tcgbenchmarks_replace_replace11.mainProcess('%','*','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test20() {
		tcgbenchmarks_replace_replace11.mainProcess('%','$','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test21() {
		tcgbenchmarks_replace_replace11.mainProcess('%','c','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test22() {
		tcgbenchmarks_replace_replace11.mainProcess('%','䁣','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test23() {
		tcgbenchmarks_replace_replace11.mainProcess('%','@','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test24() {
		tcgbenchmarks_replace_replace11.mainProcess('%','\n','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test25() {
		tcgbenchmarks_replace_replace11.mainProcess('*','?','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test26() {
		tcgbenchmarks_replace_replace11.mainProcess('*','[','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test27() {
		tcgbenchmarks_replace_replace11.mainProcess('*','%','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test28() {
		tcgbenchmarks_replace_replace11.mainProcess('*','*','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test29() {
		tcgbenchmarks_replace_replace11.mainProcess('*','$','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test30() {
		tcgbenchmarks_replace_replace11.mainProcess('*','䀤','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test31() {
		tcgbenchmarks_replace_replace11.mainProcess('*','@','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test32() {
		tcgbenchmarks_replace_replace11.mainProcess('*','\n','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test33() {
		tcgbenchmarks_replace_replace11.mainProcess('$','\n','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test34() {
		tcgbenchmarks_replace_replace11.mainProcess('$','?','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test35() {
		tcgbenchmarks_replace_replace11.mainProcess('$','[','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test36() {
		tcgbenchmarks_replace_replace11.mainProcess('$','%','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test37() {
		tcgbenchmarks_replace_replace11.mainProcess('$','*','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test38() {
		tcgbenchmarks_replace_replace11.mainProcess('$','$','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test39() {
		tcgbenchmarks_replace_replace11.mainProcess('$','䀤','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test40() {
		tcgbenchmarks_replace_replace11.mainProcess('$','@','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test41() {
		tcgbenchmarks_replace_replace11.mainProcess('c','?','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test42() {
		tcgbenchmarks_replace_replace11.mainProcess('2','?','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test43() {
		tcgbenchmarks_replace_replace11.mainProcess('a','?','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test44() {
		tcgbenchmarks_replace_replace11.mainProcess('&','?','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test45() {
		tcgbenchmarks_replace_replace11.mainProcess('䀦','?','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test46() {
		tcgbenchmarks_replace_replace11.mainProcess('䀦','[','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test47() {
		tcgbenchmarks_replace_replace11.mainProcess('c','%','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test48() {
		tcgbenchmarks_replace_replace11.mainProcess('2','%','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test49() {
		tcgbenchmarks_replace_replace11.mainProcess('a','%','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test50() {
		tcgbenchmarks_replace_replace11.mainProcess('&','%','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test51() {
		tcgbenchmarks_replace_replace11.mainProcess('䀦','%','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test52() {
		tcgbenchmarks_replace_replace11.mainProcess('c','*','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test53() {
		tcgbenchmarks_replace_replace11.mainProcess('2','*','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test54() {
		tcgbenchmarks_replace_replace11.mainProcess('a','*','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test55() {
		tcgbenchmarks_replace_replace11.mainProcess('&','*','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test56() {
		tcgbenchmarks_replace_replace11.mainProcess('䀦','*','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test57() {
		tcgbenchmarks_replace_replace11.mainProcess('c','$','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test58() {
		tcgbenchmarks_replace_replace11.mainProcess('2','$','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test59() {
		tcgbenchmarks_replace_replace11.mainProcess('a','$','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test60() {
		tcgbenchmarks_replace_replace11.mainProcess('&','$','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test61() {
		tcgbenchmarks_replace_replace11.mainProcess('䀦','$','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test62() {
		tcgbenchmarks_replace_replace11.mainProcess('c','2','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test63() {
		tcgbenchmarks_replace_replace11.mainProcess('c','䀲','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test64() {
		tcgbenchmarks_replace_replace11.mainProcess('2','a','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test65() {
		tcgbenchmarks_replace_replace11.mainProcess('2','䁡','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test66() {
		tcgbenchmarks_replace_replace11.mainProcess('a','&','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test67() {
		tcgbenchmarks_replace_replace11.mainProcess('a','䀦','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test68() {
		tcgbenchmarks_replace_replace11.mainProcess('&','a','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test69() {
		tcgbenchmarks_replace_replace11.mainProcess('&','䁡','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test70() {
		tcgbenchmarks_replace_replace11.mainProcess('耦','䁡','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test71() {
		tcgbenchmarks_replace_replace11.mainProcess('c','@','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test72() {
		tcgbenchmarks_replace_replace11.mainProcess('2','@','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test73() {
		tcgbenchmarks_replace_replace11.mainProcess('a','@','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test74() {
		tcgbenchmarks_replace_replace11.mainProcess('&','@','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test75() {
		tcgbenchmarks_replace_replace11.mainProcess('䀦','@','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test76() {
		tcgbenchmarks_replace_replace11.mainProcess('c','\n','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test77() {
		tcgbenchmarks_replace_replace11.mainProcess('2','\n','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test78() {
		tcgbenchmarks_replace_replace11.mainProcess('a','\n','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test79() {
		tcgbenchmarks_replace_replace11.mainProcess('&','\n','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test80() {
		tcgbenchmarks_replace_replace11.mainProcess('䀦','\n','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test81() {
		tcgbenchmarks_replace_replace11.mainProcess('@','\n','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test82() {
		tcgbenchmarks_replace_replace11.mainProcess('@','n','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test83() {
		tcgbenchmarks_replace_replace11.mainProcess('@','t','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test84() {
		tcgbenchmarks_replace_replace11.mainProcess('@','c','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test85() {
		tcgbenchmarks_replace_replace11.mainProcess('@','2','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test86() {
		tcgbenchmarks_replace_replace11.mainProcess('@','a','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test87() {
		tcgbenchmarks_replace_replace11.mainProcess('@','&','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test88() {
		tcgbenchmarks_replace_replace11.mainProcess('@','䀦','&','a','a','2','c','2','a','&','a');
	}

	@Test
	public void test89() {
		tcgbenchmarks_replace_replace11.mainProcess('\n','\n','&','a','a','2','c','2','a','&','a');
	}
}

====================================================== results
no errors detected

====================================================== statistics
elapsed time:       00:00:05
states:             new=562,visited=0,backtracked=562,end=90
search:             maxDepth=22,constraints=0
choice generators:  thread=1 (signal=0,lock=1,sharedRef=0,threadApi=0,reschedule=0), data=281
heap:               new=492,released=1232,maxLive=353,gcCycles=371
instructions:       74947
max memory:         481MB
loaded code:        classes=61,methods=1302

====================================================== search finished: 5/13/21 6:20 PM
